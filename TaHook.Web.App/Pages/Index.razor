@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TaHooK.Common.Models.User
@using TaHooK.Web.BL.Facades
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserApiClient UserApiClient

<PageTitle>Index</PageTitle>

<div class="flex flex-col justify-center items-center h-screen w-full">
    <h1 class="text-center text-5xl font-bold m-5">TaHooK!</h1>
    @if (user != null && name != "")
    {
        <h2 class="text-center text-xl font-bold m-5">Welcome, @name!</h2>
    }
    else
    {
        <NavLink href="authentication/login">
            <div class="p-2.5 mt-3 rounded-md px-4 duration-300 bg-navBlue cursor-pointer hover:bg-blue-600 text-white">
                <span class="text-[15px] text-center text-gray-200 font-bold">Log In</span>
            </div>
        </NavLink>
    }
</div>

@code {
    private ClaimsPrincipal? user;
    private string name = "";
    private async ValueTask Call()
    {
        if (user == null || !user.Claims.Any()) return;

        var id = user.Claims.First(c => c.Type.ToLower() == "id").Value;
        bool notFound = false;
        try
        {
            await UserApiClient.UsersGetAsync(Guid.Parse(id));
        }
        catch (Exception e)
        {
            notFound = true;
        }

        if(!notFound) return;

        
        var u = new UserCreateUpdateModel
        {
            
            Email = user.Claims.First(c => c.Type.ToLower() == "email").Value,
            Name = user.Claims.First(c => c.Type.ToLower() == "displayname").Value
        };
        var x = await UserApiClient.UsersPostAsync(u);
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        user = authState.User;
        if (user is not null && user.Claims.Any())
        {
            name = user.Claims.First(c => c.Type.ToLower() == "displayname").Value;
            await Call();
        }
    }
}